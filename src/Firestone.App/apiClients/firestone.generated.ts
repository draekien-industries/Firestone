//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IAssetHoldersClient {

    /**
     * Get an asset holder by id.
     * @param id The ID of the asset holder.
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     * @return The AssetHolderDto
     */
    get(id: string, x_Correlation_ID?: string | undefined): Promise<AssetHolderDto>;

    /**
     * Add an asset holder
     * @param request The AddAssetHolderCommand
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     * @return The created AssetHolderDto
     */
    add(request: AddAssetHolderCommand, x_Correlation_ID?: string | undefined): Promise<AssetHolderDto>;
}

export class AssetHoldersClient implements IAssetHoldersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get an asset holder by id.
     * @param id The ID of the asset holder.
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     * @return The AssetHolderDto
     */
    get(id: string, x_Correlation_ID?: string | undefined, signal?: AbortSignal | undefined): Promise<AssetHolderDto> {
        let url_ = this.baseUrl + "/assetholders/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "X-Correlation-ID": x_Correlation_ID !== undefined && x_Correlation_ID !== null ? "" + x_Correlation_ID : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<AssetHolderDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as NotFoundProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UnknownProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AssetHolderDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AssetHolderDto>(null as any);
    }

    /**
     * Add an asset holder
     * @param request The AddAssetHolderCommand
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     * @return The created AssetHolderDto
     */
    add(request: AddAssetHolderCommand, x_Correlation_ID?: string | undefined, signal?: AbortSignal | undefined): Promise<AssetHolderDto> {
        let url_ = this.baseUrl + "/assetholders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            signal,
            headers: {
                "X-Correlation-ID": x_Correlation_ID !== undefined && x_Correlation_ID !== null ? "" + x_Correlation_ID : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: Response): Promise<AssetHolderDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as NotFoundProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UnknownProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            result201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AssetHolderDto;
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AssetHolderDto>(null as any);
    }
}

export interface IAssetsClient {

    /**
     * Get an assets entry by its ID
     * @param id The ID of the assets entry
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     * @return The AssetsDto
     */
    get(id: string, x_Correlation_ID?: string | undefined): Promise<AssetsDto>;

    /**
     * Update an assets entry with new values
     * @param id The ID of the assets entry
     * @param data The data for updating the assets entry
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     * @return The updated AssetsDto
     */
    update(id: string, data: UpdateAssetsDto, x_Correlation_ID?: string | undefined): Promise<AssetsDto>;
}

export class AssetsClient implements IAssetsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get an assets entry by its ID
     * @param id The ID of the assets entry
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     * @return The AssetsDto
     */
    get(id: string, x_Correlation_ID?: string | undefined, signal?: AbortSignal | undefined): Promise<AssetsDto> {
        let url_ = this.baseUrl + "/assets/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "X-Correlation-ID": x_Correlation_ID !== undefined && x_Correlation_ID !== null ? "" + x_Correlation_ID : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<AssetsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as NotFoundProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UnknownProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AssetsDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AssetsDto>(null as any);
    }

    /**
     * Update an assets entry with new values
     * @param id The ID of the assets entry
     * @param data The data for updating the assets entry
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     * @return The updated AssetsDto
     */
    update(id: string, data: UpdateAssetsDto, x_Correlation_ID?: string | undefined, signal?: AbortSignal | undefined): Promise<AssetsDto> {
        let url_ = this.baseUrl + "/assets/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(data);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            signal,
            headers: {
                "X-Correlation-ID": x_Correlation_ID !== undefined && x_Correlation_ID !== null ? "" + x_Correlation_ID : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<AssetsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as NotFoundProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UnknownProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AssetsDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AssetsDto>(null as any);
    }
}

export interface IFireGraphsClient {

    /**
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     */
    get(id: string, x_Correlation_ID?: string | undefined): Promise<FireGraphDto>;
}

export class FireGraphsClient implements IFireGraphsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     */
    get(id: string, x_Correlation_ID?: string | undefined, signal?: AbortSignal | undefined): Promise<FireGraphDto> {
        let url_ = this.baseUrl + "/firegraphs/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "X-Correlation-ID": x_Correlation_ID !== undefined && x_Correlation_ID !== null ? "" + x_Correlation_ID : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<FireGraphDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as NotFoundProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UnknownProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as FireGraphDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FireGraphDto>(null as any);
    }
}

export interface IFireTablesClient {

    /**
     * List a page of FIRE tables
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     * @param limit (optional) 
     * @param cursor (optional) 
     * @return The PaginatedResponse`1 of FireTableSummaryDto
     */
    list(x_Correlation_ID?: string | undefined, limit?: number | undefined, cursor?: number | undefined): Promise<PaginatedResponseOfFireTableSummaryDto>;

    /**
     * Add a new FIRE table
     * @param request The AddFireTableCommand
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     * @return The created FireTableDto
     */
    add(request: AddFireTableCommand, x_Correlation_ID?: string | undefined): Promise<FireTableDto>;

    /**
     * Get a FIRE table by ID
     * @param id The ID of the FireTableDto
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     * @return The FireTableDto
     */
    get(id: string, x_Correlation_ID?: string | undefined): Promise<FireTableDto>;
}

export class FireTablesClient implements IFireTablesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * List a page of FIRE tables
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     * @param limit (optional) 
     * @param cursor (optional) 
     * @return The PaginatedResponse`1 of FireTableSummaryDto
     */
    list(x_Correlation_ID?: string | undefined, limit?: number | undefined, cursor?: number | undefined, signal?: AbortSignal | undefined): Promise<PaginatedResponseOfFireTableSummaryDto> {
        let url_ = this.baseUrl + "/firetables?";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "Limit=" + encodeURIComponent("" + limit) + "&";
        if (cursor === null)
            throw new Error("The parameter 'cursor' cannot be null.");
        else if (cursor !== undefined)
            url_ += "Cursor=" + encodeURIComponent("" + cursor) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "X-Correlation-ID": x_Correlation_ID !== undefined && x_Correlation_ID !== null ? "" + x_Correlation_ID : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processList(_response);
        });
    }

    protected processList(response: Response): Promise<PaginatedResponseOfFireTableSummaryDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as NotFoundProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UnknownProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as PaginatedResponseOfFireTableSummaryDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginatedResponseOfFireTableSummaryDto>(null as any);
    }

    /**
     * Add a new FIRE table
     * @param request The AddFireTableCommand
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     * @return The created FireTableDto
     */
    add(request: AddFireTableCommand, x_Correlation_ID?: string | undefined, signal?: AbortSignal | undefined): Promise<FireTableDto> {
        let url_ = this.baseUrl + "/firetables";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            signal,
            headers: {
                "X-Correlation-ID": x_Correlation_ID !== undefined && x_Correlation_ID !== null ? "" + x_Correlation_ID : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: Response): Promise<FireTableDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as NotFoundProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UnknownProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            result201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as FireTableDto;
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FireTableDto>(null as any);
    }

    /**
     * Get a FIRE table by ID
     * @param id The ID of the FireTableDto
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     * @return The FireTableDto
     */
    get(id: string, x_Correlation_ID?: string | undefined, signal?: AbortSignal | undefined): Promise<FireTableDto> {
        let url_ = this.baseUrl + "/firetables/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "X-Correlation-ID": x_Correlation_ID !== undefined && x_Correlation_ID !== null ? "" + x_Correlation_ID : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<FireTableDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as NotFoundProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UnknownProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as FireTableDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FireTableDto>(null as any);
    }
}

export interface ILineItemsClient {

    /**
     * Get a line item by ID.
     * @param id The ID of the LineItemDto
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     * @return The LineItemDto
     */
    get(id: string, x_Correlation_ID?: string | undefined): Promise<LineItemDto>;

    /**
     * Add a new line item to a FIRE table
     * @param request The AddLineItemCommand
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     * @return The created LineItemDto
     */
    add(request: AddLineItemCommand, x_Correlation_ID?: string | undefined): Promise<LineItemDto>;
}

export class LineItemsClient implements ILineItemsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get a line item by ID.
     * @param id The ID of the LineItemDto
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     * @return The LineItemDto
     */
    get(id: string, x_Correlation_ID?: string | undefined, signal?: AbortSignal | undefined): Promise<LineItemDto> {
        let url_ = this.baseUrl + "/lineitems/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "X-Correlation-ID": x_Correlation_ID !== undefined && x_Correlation_ID !== null ? "" + x_Correlation_ID : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<LineItemDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as NotFoundProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UnknownProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as LineItemDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LineItemDto>(null as any);
    }

    /**
     * Add a new line item to a FIRE table
     * @param request The AddLineItemCommand
     * @param x_Correlation_ID (optional) The correlation id to be associated with the request. One will be generated by the API if not provided.
     * @return The created LineItemDto
     */
    add(request: AddLineItemCommand, x_Correlation_ID?: string | undefined, signal?: AbortSignal | undefined): Promise<LineItemDto> {
        let url_ = this.baseUrl + "/lineitems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            signal,
            headers: {
                "X-Correlation-ID": x_Correlation_ID !== undefined && x_Correlation_ID !== null ? "" + x_Correlation_ID : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: Response): Promise<LineItemDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as NotFoundProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UnknownProblemDetails;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            result201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as LineItemDto;
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LineItemDto>(null as any);
    }
}

export interface ProblemDetails {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;
    extensions?: { [key: string]: any; };
}

export interface StatusCodeProblemDetails extends ProblemDetails {
}

export interface NotFoundProblemDetails extends StatusCodeProblemDetails {
}

export interface UnknownProblemDetails extends StatusCodeProblemDetails {
}

/** Data transfer object for an asset holder. */
export interface AssetHolderDto {
    /** The ID of the asset holder. */
    id?: string;
    /** The ID of the FIRE table that this asset holder is associated with. */
    fireTableId?: string;
    /** The name of the asset holder. */
    name?: string;
    /** The expected monthly income of the asset holder. */
    expectedMonthlyIncome?: number;
    /** The planned monthly contribution (towards growing assets) for the asset holder. */
    plannedMonthlyContribution?: number;
    /** The historical records of the asset holder's total asset values. */
    assets?: AssetsDto[];
}

/** Data transfer object for an asset holder's assets. */
export interface AssetsDto {
    /** The ID of the assets. */
    id?: string;
    /** The ID of the asset holder. */
    assetHolderId?: string;
    /** The ID of the line item the assets where recorded against. */
    lineItemId?: string;
    /** The assets total amount. */
    amount?: number;
}

/** A command that creates a new asset holder. */
export interface AddAssetHolderCommand {
    /** The ID of the FireTable to add the asset holder to. */
    fireTableId: string;
    /** The name of the asset holder. */
    name: string;
    /** The expected monthly income amount. */
    expectedMonthlyIncome?: number;
    /** The planned monthly contribution amount. */
    plannedMonthlyContribution?: number;
}

/** Data transfer object for updating assets. */
export interface UpdateAssetsDto {
    /** The new total assets amount. */
    amount?: number;
}

export interface FireGraphDto {
    id?: string;
    coastTargetStartingBalance?: number;
    minimumMonthlyContribution?: number;
    recordedAssets?: DataPointDto[];
    projectedAssets?: DataPointDto[];
    adjustedTargets?: AdjustedTargetsDto;
}

export interface DataPointDto {
    date?: Date;
    amount?: number;
}

export interface AdjustedTargetsDto {
    retirementTargets?: DataPointDto[];
    coastTargets?: DataPointDto[];
    minimumGrowthTargets?: DataPointDto[];
}

export interface PaginatedResponseOfFireTableSummaryDto {
    links?: Links | null;
    total?: number;
    results?: FireTableSummaryDto[];
}

export interface Links {
    self?: string | null;
    next?: string | null;
    previous?: string | null;
}

/** A summary of a FIRE Table */
export interface FireTableSummaryDto {
    /** The ID of the FIRE table. */
    id?: string;
    /** The name of the table. */
    name?: string;
    /** The asset holders associated with the FIRE table. */
    assetHolders?: AssetHolderSummaryDto[];
}

/** Data transfer object for an asset holder summary details. */
export interface AssetHolderSummaryDto {
    /** The ID of the asset holder. */
    id?: string;
    /** The name of the asset holder. */
    name?: string;
}

/** Data transfer object for a FIRE table */
export interface FireTableDto {
    /** The ID of the FIRE table */
    id?: string;
    /** The name of the table. */
    name?: string;
    /** The yearly inflation rate. Used to calculate various projections */
    yearlyInflationRate?: number;
    /** The monthly inflation rate. Used to calculate various projections. */
    monthlyInflationRate?: number;
    /** The yearly nominal return rate. Used to calculate various projections. */
    yearlyNominalReturnRate?: number;
    /** The monthly nominal return rate. */
    monthlyNominalReturnRate?: number;
    /** The assets value that you want to achieve when you reach retirement. */
    retirementTargetBeforeInflation?: number;
    /** The number of years until you want to retire. */
    yearsToRetirement?: number;
    /** The number of months until retirement. */
    monthsToRetirement?: number;
    /** The table's line items. */
    lineItems?: LineItemDto[];
    /** The table's asset holders */
    assetHolders?: AssetHolderDto[];
}

export interface LineItemDto {
    id?: string;
    fireTableId?: string;
    date?: Date;
    assets?: AssetsDto[];
    assetsTotal?: number;
}

/** A command to create a new FIRE table. */
export interface AddFireTableCommand {
    name: string;
    /** The expected yearly inflation rate. */
    yearlyInflationRate?: number;
    /** The expected yearly nominal return rate. */
    yearlyNominalReturnRate?: number;
    /** The target asset value at retirement. */
    retirementTarget?: number;
    /** The number of years to reach the target asset value. */
    yearsUntilRetirement?: number;
}

/** A command for adding a new line item to a FIRE table. */
export interface AddLineItemCommand {
    /** The ID of the FIRE table to add the line item to. */
    fireTableId: string;
    /** The date the line item refers to. */
    date: Date;
    /** A key value pair of the AssetHolderId and the AssetAmount. */
    assets: { [key: string]: number; };
}

export class FirestoneApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isFirestoneApiException = true;

    static isFirestoneApiException(obj: any): obj is FirestoneApiException {
        return obj.isFirestoneApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new FirestoneApiException(message, status, response, headers, null);
}